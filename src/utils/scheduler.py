from datetime import datetime, timedelta, timezone
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from loguru import logger

from src.config import CHANNEL_ID, ADMIN_ID
from src.database import database as db
from src.utils.user_utils import get_user_mention

async def check_subscriptions_with_stats(bot: Bot, admin_chat_id: int = ADMIN_ID):

    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫...")
    
    try:
        active_users = await db.get_users_by_status('active')
        total_active_before = len(active_users)
        today = datetime.now().date()
        expired_count = 0

        for user in active_users:
            user_id = user['user_id']
            end_date_str = user.get('subscription_end_date')
            
            if not end_date_str:
                logger.warning(f"–£ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")
                continue

            try:
                end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()
                if end_date < today:
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞. –£–¥–∞–ª–µ–Ω–∏–µ...")
                    await bot.ban_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
                    # –°—Ä–∞–∑—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å, –∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                    await bot.unban_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
                    await db.update_user_status(user_id, 'expired')
                    expired_count += 1
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞, —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'expired'.")
                    await bot.send_message(admin_chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} {get_user_mention(user)} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞, —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'expired'.")
            except ValueError:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{end_date_str}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        updated_active_users = await db.get_users_by_status('active')
        total_active_after = len(updated_active_users)
        
        stats = {
            'message': '',
            'total_before': total_active_before,
            'total_after': total_active_after,
            'expired_count': expired_count,
            'success': True
        }
        
        if expired_count > 0:
            stats_message = (
                f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –ë—ã–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_active_before}\n"
                f"‚Ä¢ –°—Ç–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_active_after}\n"
                f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {expired_count}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–∞."
            )
        else:
            stats_message = (
                f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_active_before}\n"
                f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: 0\n\n"
                f"–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã! üéâ"
            )
        
        stats['message'] = stats_message
            
        try:
            await bot.send_message(admin_chat_id, stats_message, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        error_stats = {
            'success': False,
            'error': str(e),
            'message': f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:\n{str(e)}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ª–æ–≥–∞—Ö."
        }
        
        try:
            await bot.send_message(admin_chat_id, error_stats['message'], parse_mode='HTML')
        except Exception as send_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
        
        return error_stats

async def scheduled_check_subscriptions(bot: Bot):
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫...")
    await check_subscriptions_with_stats(bot)

def setup_scheduler(bot: Bot):
    scheduler = AsyncIOScheduler(timezone=timezone(timedelta(hours=3)))
    scheduler.add_job(scheduled_check_subscriptions, 'cron', hour=4, minute=0, args=(bot,))
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 4:00 –ø–æ –ú–°–ö —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.") 