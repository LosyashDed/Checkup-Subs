from aiogram import Router, F, Bot
from aiogram.filters import Command, BaseFilter
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
from datetime import datetime
import os
import glob

from src.config import ADMIN_ID, CHANNEL_ID
from src.database import database as db
from src.utils.user_utils import get_user_mention
from src.keyboards.inline import get_subscription_keyboard
from src.utils.filter import setup_admin_router
from src.utils.scheduler import check_subscriptions_with_stats

admin_router = Router()
admin_router = setup_admin_router(admin_router)

@admin_router.message(Command("start"))
async def start_command(message: Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    """
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Checkup-Subs Bot!</b>\n\n"
        "ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.\n\n"
        "üìã <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n"
        "- –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "- –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –æ—á–∏—â–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "üîß <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>\n"
        "- <code>/stats</code> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫\n"
        "- <code>/help</code> - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "üöÄ <b>–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>"
    )
    
    await message.answer(welcome_text, parse_mode='HTML')


@admin_router.message(Command("help"))
async def help_command(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    help_text = (
        "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "üöÄ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "- <code>/start</code> - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "- <code>/help</code> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:</b>\n"
        "- <code>/ban @username</code> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "- <code>/unban @username</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "- <code>/extend @username</code> - –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
        "üìä <b>–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–æ–≤:</b>\n"
        "- <code>/active</code> - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
        "- <code>/expiring</code> - –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (10 –¥–Ω–µ–π)\n"
        "- <code>/all</code> - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n\n"
        "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n"
        "- <code>/check_subs</code> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ\n\n"
        "üìã <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "- <code>/log</code> - –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "<code>/ban @john_doe</code>\n"
        "<code>/extend 123456789</code>\n"
        "<code>/unban @jane_smith</code>"
    )
    
    await message.answer(help_text, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –±–∞–Ω–∞
async def process_ban(user_id: int, bot: Bot):
    logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    await db.update_user_status(user_id, 'banned')
    try:
        await bot.ban_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        await bot.unban_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ —á–∞—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ —Ç–∞–º –Ω–µ—Ç): {e}")
    try:
        # await bot.decline_chat_join_request(chat_id=CHANNEL_ID, user_id=user_id, hide_request=True)
        logger.info(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –æ—Ç {user_id} (–≤–æ–∑–º–æ–∂–Ω–æ, –µ–µ –Ω–µ—Ç): {e}")

@admin_router.message(Command("ban"))
async def ban_user_command(message: Message, bot: Bot):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü—Ä–∏–º–µ—Ä: `/ban 123456` –∏–ª–∏ `/ban @nickname`")
        return
    
    identifier = args[1]
    user_data = await db.find_user_by_id_or_username(identifier)

    if not user_data:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    user_id = user_data['user_id']
    await process_ban(user_id, bot)
    user_mention = get_user_mention(user_data)
    await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_mention}</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", parse_mode='HTML')

@admin_router.message(Command("unban"))
async def unban_user_command(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü—Ä–∏–º–µ—Ä: `/unban 123456` –∏–ª–∏ `/unban @nickname`")
        return

    identifier = args[1]
    user_data = await db.find_user_by_id_or_username(identifier)

    if not user_data:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    if user_data['status'] != 'banned':
        await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return

    user_id = user_data['user_id']
    await db.update_user_status(user_id, 'rejected')
    user_mention = get_user_mention(user_data)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_mention}</b> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.", parse_mode='HTML')
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


@admin_router.message(Command("extend"))
async def extend_subscription_command(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü—Ä–∏–º–µ—Ä: `/extend 123456` –∏–ª–∏ `/extend @nickname`")
        return

    identifier = args[1]
    user_data = await db.find_user_by_id_or_username(identifier)

    if not user_data:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    user_id = user_data['user_id']
    user_mention = get_user_mention(user_data)
    keyboard = get_subscription_keyboard(user_id)
    
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_mention}</b>.\n<i>–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–∞.</i>"
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')


@admin_router.message(Command("check_subs"))
async def check_subscriptions_command(message: Message, bot: Bot):
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫...")
    
    try:
        stats = await check_subscriptions_with_stats(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:\n{str(e)}\n\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ª–æ–≥–∞—Ö.",
            parse_mode='HTML'
        )


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_PER_PAGE = 20

async def format_users_page(users: list[dict], page: int, list_type: str) -> tuple[str, object]:    
    if not users:
        return "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.", None

    total_pages = (len(users) + USERS_PER_PAGE - 1) // USERS_PER_PAGE
    page = max(1, min(page, total_pages))
    
    start_index = (page - 1) * USERS_PER_PAGE
    end_index = start_index + USERS_PER_PAGE
    page_users = users[start_index:end_index]

    if list_type == 'active':
        type_text = '–∞–∫—Ç–∏–≤–Ω—ã–µ'
    elif list_type == 'expiring':
        type_text = '–∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 10 –¥–Ω–µ–π'
    else:
        type_text = '–≤—Å–µ'

    text = f"<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({type_text}) - –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}</b>\n\n"
    
    for user in page_users:
        user_mention = get_user_mention(user)
        user_id = user['user_id']
        status = user['status']
        
        if list_type == 'active':
            end_date_str = user.get('subscription_end_date')
            if end_date_str:
                try:
                    end_date = datetime.strptime(end_date_str, '%Y-%m-%d').strftime('%d.%m.%Y')
                    text += f"ID: <code>{user_id}</code> - {user_mention} - –¥–æ {end_date}\n"
                except ValueError:
                    text += f"ID: <code>{user_id}</code> - {user_mention} - (–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞)\n"
            else:
                 text += f"ID: <code>{user_id}</code> - {user_mention} - (–Ω–µ—Ç –¥–∞—Ç—ã)\n"
        else:
            end_date_str = user.get('subscription_end_date')
            end_date = "N/A"
            if end_date_str:
                try:
                    end_date = datetime.strptime(end_date_str, '%Y-%m-%d').strftime('%d.%m.%Y')
                except ValueError:
                    end_date = "–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞"
            text += f"ID: <code>{user_id}</code> - {user_mention} - <b>{status}</b> - –¥–æ {end_date}\n"

    builder = InlineKeyboardBuilder()
    if page > 1:
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_{list_type}_{page - 1}")
    
    builder.button(text=f"–°—Ç—Ä. {page}/{total_pages}", callback_data="noop")

    if page < total_pages:
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"list_{list_type}_{page + 1}")
    
    return text, builder.as_markup()

@admin_router.message(Command("active"))
async def list_active_users(message: Message):
    users = await db.get_users_by_status('active')
    text, keyboard = await format_users_page(users, 1, 'active')
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

@admin_router.message(Command("expiring"))
async def subscription_stats_command(message: Message):
    users = await db.get_users_expiring_soon('active', days=10)
    text, keyboard = await format_users_page(users, 1, 'expiring')
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

@admin_router.message(Command("all"))
async def list_all_users(message: Message):
    users = await db.get_all_users()
    text, keyboard = await format_users_page(users, 1, 'all')
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

@admin_router.callback_query(F.data.startswith("list_"))
async def paginate_list(call: CallbackQuery):
    _, list_type, page_str = call.data.split("_")
    page = int(page_str)

    if list_type == 'active':
        users = await db.get_users_by_status('active')
    elif list_type == 'expiring':
        users = await db.get_users_expiring_soon(10)
    else:
        users = await db.get_all_users()

    text, keyboard = await format_users_page(users, page, list_type)
    
    try:
        await call.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è): {e}")
    finally:
        await call.answer()

@admin_router.callback_query(F.data == "noop")
async def noop_callback(call: CallbackQuery):
    await call.answer() 

@admin_router.message(Command("log"))
async def send_log_files(message: Message):
    try:
        logs_dir = "logs"
        
        if not os.path.exists(logs_dir):
            await message.answer("üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        log_files = []
        for pattern in ["*.log", "*.zip"]:
            log_files.extend(glob.glob(os.path.join(logs_dir, pattern)))
        
        if not log_files:
            await message.answer("üìÑ –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        log_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
        
        files_to_send = log_files[:2]
        
        await message.answer(f"üìã –û—Ç–ø—Ä–∞–≤–ª—è—é {len(files_to_send)} —Ñ–∞–π–ª(–æ–≤) –ª–æ–≥–æ–≤...")
        
        for file_path in files_to_send:
            try:
                file_size = os.path.getsize(file_path)
                file_size_mb = file_size / (1024 * 1024)
                
                if file_size_mb > 200:
                    await message.answer(f"‚ö†Ô∏è –§–∞–π–ª {os.path.basename(file_path)} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.1f}MB) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                    continue
                
                document = FSInputFile(file_path)
                await message.answer_document(
                    document
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –ª–æ–≥–∞: {file_path}")
                
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ {file_path}: {e}")
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /log –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /log: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {str(e)}") 