from datetime import datetime, timedelta

from aiogram import Router, F, Bot
from aiogram.types import ChatJoinRequest, CallbackQuery
from loguru import logger

from src.config import ADMIN_ID, CHANNEL_ID
from src.database import database as db
from src.utils.user_utils import get_user_mention
from src.utils.filter import setup_admin_router
from src.handlers.admin_commands import process_ban
from src.keyboards.inline import get_approval_keyboard, get_subscription_keyboard

join_router = Router()
join_router = setup_admin_router(join_router)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@join_router.chat_join_request(F.chat.id == CHANNEL_ID)
async def handle_join_request(request: ChatJoinRequest, bot: Bot):
    user_id = request.from_user.id
    full_name = request.from_user.full_name
    username = request.from_user.username
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç {get_user_mention(request.from_user)}")

    await db.add_user(user_id, full_name, username)
    user_data = await db.get_user(user_id)

    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ë–î.")
        return

    status = user_data.get('status')

    if status == 'banned':
        await request.decline()
        logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        return
    elif status == 'active':
        await request.approve()
        logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        return

    user_mention = get_user_mention(user_data)
    message_text = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user_mention}</b>"

    if status == 'expired':
        end_date_str = user_data.get('subscription_end_date')
        if end_date_str:
            try:
                end_date = datetime.strptime(end_date_str, '%Y-%m-%d')
                message_text += f"\n<i>(–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {end_date.strftime('%d.%m.%Y')})</i>"
            except (ValueError, TypeError):
                 logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{end_date_str}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


    keyboard = get_approval_keyboard(user_id)
    await bot.send_message(ADMIN_ID, message_text, reply_markup=keyboard, parse_mode='HTML')
    logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")

@join_router.callback_query(F.data.startswith("approve_"))
async def approve_user_prompt(call: CallbackQuery):
    user_id = int(call.data.split("_")[1])
    user_data = await db.get_user(user_id)
    if not user_data:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    user_mention = get_user_mention(user_data)
    keyboard = get_subscription_keyboard(user_id)
    await call.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_mention}</b>:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await call.answer()


@join_router.callback_query(F.data.startswith("set_sub_"))
async def set_subscription(call: CallbackQuery, bot: Bot):
    parts = call.data.split("_")
    user_id_str = parts[2]  
    days_str = parts[3]    
    user_id = int(user_id_str)
    days = int(days_str)

    user_data = await db.get_user(user_id)
    if not user_data:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    try:
        try:
            chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            is_member = chat_member.status in ['member', 'administrator', 'creator']
        except Exception:
            is_member = False

        if not is_member:
            await bot.approve_chat_join_request(chat_id=CHANNEL_ID, user_id=user_id)
            logger.info(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞.")

        end_date = datetime.now() + timedelta(days=days)
        end_date_str = end_date.strftime('%Y-%m-%d')
        await db.update_subscription(user_id, end_date_str)
        
        user_mention = get_user_mention(user_data)
        await call.message.edit_text(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_mention}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –¥–æ {end_date.strftime('%d.%m.%Y')}.",
            parse_mode='HTML'
        )
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.")
        
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {user_id}: {e}")
        await call.message.edit_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")
    finally:
        await call.answer()

@join_router.callback_query(F.data.startswith("decline_"))
async def decline_user(call: CallbackQuery, bot: Bot):
    user_id = int(call.data.split("_")[1])
    user_data = await db.get_user(user_id)
    if not user_data:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    try:
        # await bot.decline_chat_join_request(chat_id=CHANNEL_ID, user_id=user_id, hide_request=True)
        await db.update_user_status(user_id, 'rejected')
        user_mention = get_user_mention(user_data)
        await call.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_mention}</b> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", parse_mode='HTML')
        logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è {user_id}: {e}")
        await call.message.edit_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è {user_id}.")
    finally:
        await call.answer() 


@join_router.callback_query(F.data.startswith("ban_"))
async def ban_user_callback(call: CallbackQuery, bot: Bot):
    user_id = int(call.data.split("_")[1])
    await process_ban(user_id, bot)
    user_data = await db.get_user(user_id)
    if user_data:
        user_mention = get_user_mention(user_data)
        await call.message.edit_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_mention}</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", parse_mode='HTML')
    await call.answer()